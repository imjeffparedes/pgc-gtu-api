"use strict";

const request = require("request")
    , crypto = require("crypto")
    , querystring = require("querystring")
    ;

module.exports = class GTU {
    /**
     * GTU
     * Creates the instance of the `GTU` class.
     *
     * @name GTU
     * @function
     * @param {Object} options An object containing:
     *
     *  - `publicKey` (String): GTU API wallet public key credentials (mandatory).
     *  - `privateKey` (String): GTU API wallet private key credentials (mandatory).
     *  - `dealerCode` (String): GTU API wallet dealerCode credentials (mandatory).
     *  - `host` (String): GTU api host (Optional default: `https://gtu.pldtglobal.com/`).
     *  - `host` (String): GTU api host (Optional default: `https://gtu.pldtglobal.com`).
     *  - `timeout` (Integer): integer containing the number of milliseconds to wait for a server to send response headers (and start the response body) before aborting the request.  (Optional default: 60000).
     */
    constructor (options) {

        this.options = options;
        this.publicKey = options.publicKey || process.env.publicKey;
        this.privateKey = options.privateKey || process.env.privateKey;
        this.dealerCode = options.dealerCode || process.env.dealerCode;
        this.host = options.host || "https://gtu.pldtglobal.com";
        this.timeout = options.timeout || 60*1000;
        this.hmac = crypto.createHmac('sha1', options.privateKey);
        this.request = options.request || request;
    }

    /**
     * topup
     * Send topup request to api
     *
     * @name topup
     * @function
     * @param {String} requestId Unique alphanumeric id per request. To be generated by the client. (mandatory)
     * @param {String} productCode Unique code per product that you may transact with. (mandatory)
     * @param {String} targetNumber Target MSISDN, landline, or account number depending on product code. (mandatory)
     * @param {Function} cb The callback function.
     */
    topup (requestId, productCode, targetNumber, cb) {
        const hash = this.hmac.update(requestId+targetNumber+productCode+this.publicKey).digest('hex');
        return this._request({
            url: "GTG/api/"+this.publicKey+"/"+requestId+"/"+productCode+"/"+targetNumber+"/"+hash+"/"+this.dealerCode
        }, cb);
    }

    /**
     * balanceInquiry
     * Get wallet or account balance
     *
     * @name balanceInquiry
     * @function
     * @param {String} requestId  Unique alphanumeric id per request. To be generated by the client. (mandatory)
     * @param {Function} cb The callback function.
     */
    balanceInquiry (requestId, cb) {
        const hash = this.hmac.update(requestId+this.publicKey).digest('hex');
        return this._request({
            url: "GTG/api/balance/"+this.publicKey+"/"+requestId+"/"+hash
        }, cb);
    } 

    /**
     * getTopUp
     * Get topup status
     *
     * @name getTopUp
     * @function
     * @param {String} requestId Unique alphanumeric id of request. Generated by the client during topup request. (mandatory)
     * @param {Function} cb The callback function.
     */
    getTopUp (requestId, cb) {
        const hash = this.hmac.update(requestId+this.publicKey).digest('hex');
        return this._request({
            url: "GTG/api/inquireTransactionStatus/"+this.publicKey+"/"+requestId+"/"+hash
        }, cb);
    } 

    /**
     * balanceInquiry
     * Get wallet or account balance
     *
     * @name balanceInquiry
     * @function
     * @param {String} requestId  Unique alphanumeric id per request. To be generated by the client. (mandatory)
     * @param {Function} cb The callback function.
     */
    getProducts (requestId, cb) {
        const hash = this.hmac.update(requestId+this.publicKey).digest('hex');
        return this._request({
            url: "GTG/api/getProducts/"+this.publicKey+"/"+requestId+"/"+hash
        }, cb);
    }

    /**
     * messageCode
     * Get detailed description of message code.
     *
     * @name messageCode
     * @function
     * @param {String} message Message code from reply of request (mandatory)
     */
    messageCode (message) {
        let description = {
            "INVALID_PUBLICKEY":
            "The publickey provided wasnâ€™t recognized. Please contact our marketing representative if publickey provided was correct but encountered this message."
            ,"INVALID_HMACHASH":
            "The hash provided did not match with the hash generated using the corresponding privatekey of the provided publickey."
            ,"SUCCESS:":
            "Transaction was successful."
            ,"ERROR_UNKNOWN":
            "An unforeseen error occurred in the system. Check transaction for discrepancy and send to our marketing representative."
            ,"INVALID_PRODUCTCODE":
            "The productcode provided was incorrect. Please contact our marketing representative if productcode provided was correct but encountered this message."
            ,"INVALID_TARGETNUMBER":
            "The targetnumber provided was either pre-active, was not in the right format, or was not appropriate for the productcode provided."
            ,"INSUFFICIENT_BALANCE":
            "The corresponding user of the provided publickey has not enough balance for the provided productcode."
            ,"ERROR_FULFILLMENT":
            "An unforeseen error occurred with the fulfillment. Check transaction for discrepancy and send to our marketing representative."
        };
        return description[message];
    }

    /**
     * statusCode
     * Get detailed description of status code.
     *
     * @name statusCode
     * @function
     * @param {String} status Status code from reply of request  (mandatory)
     */
    statusCode (status) {
        let description = {
            "COMPLETE":
            "Transaction was successful."
            ,"TIMEOUT":
            "Timeout encountered while processing request."
            ,"FAILED":
            "Invalid parameter(s) upon initial validation."
            ,"ERROR":
            "System or fulfillment error."
        };
        return description[status];
    }

    /**
     * _request
     * Low level function for making requests to the API endpoints.
     *
     * @name _request
     * @function
     * @param {Object} options An object containing the following fields:
     *
     *  - `url` (String): The api endpoint.
     *  - `method` (String): The request method (default: `get`).
     *  - `query` (Object): The query object.
     *  - `data` (Object): The POST data object.
     *  - `version` (String): API Version. If not specified your pinned verison is used.
     *
     * @param {Function} cb The callback function.
     */
    _request (options, cb) {
        let _url = options.url
          , method = options.method || "get"
          , query = options.query || {}
          , data = options.data
          , timeout = this.timeout
          , qs = querystring.stringify(query)
          , removeTrailingSlash = options.removeTrailingSlash || false
          , url = this.host + "/" + _url + (removeTrailingSlash ? "" : "/") + (qs ? "?" + qs : "")
          ;

        return request({
            url: url
          , method: method
          , timeout: timeout
          , headers: {
             'Content-Type': 'application/json'
            }
          , json: data ? data : true
        }, (err, res) => {
            if (res && res.body ) 
                cb(err, res.body, res); 
            else 
                cb(err, null, res)
        })
    }
};